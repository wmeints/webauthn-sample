{"version":3,"file":"js/registration.js","mappings":"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","sources":["webpack://client/./registration/api.ts","webpack://client/./registration/RegistrationForm.tsx","webpack://client/./registration/index.tsx","webpack://client/./shared/ErrorMessage.tsx","webpack://client/./shared/InvalidFeedback.tsx","webpack://client/./shared/FormTextInput.tsx","webpack://client/./shared/conversions.ts","webpack://client/./shared/navigation.ts","webpack://client/./shared/validation.ts","webpack://client/./node_modules/classnames/index.js","webpack://client/./node_modules/react-dom/client.js"],"sourcesContent":["import {toBase64Url, toArrayBuffer} from \"../shared/conversions\";\r\nimport {ValidationResult} from \"../shared/validation\";\r\n\r\n/**\r\n * Retrieves the options for creating a new public key credential on the website.\r\n * @param displayName The display name for the user.\r\n * @param userName  The user name for the user.\r\n * @returns The options to use for creating a new public key credential in the browser using a USB key.\r\n */\r\nexport async function getCredentialCreateOptions(displayName: string, userName: string): Promise<PublicKeyCredentialCreationOptions | ValidationResult> {\r\n    let data = {\r\n        userName,\r\n        displayName\r\n    };\r\n\r\n    let response = await fetch(\"/api/registration/options\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\"\r\n        }\r\n    });\r\n\r\n    if (response.status == 400) {\r\n        let errorResponseData = await response.json();\r\n        return {messages: errorResponseData};\r\n    }\r\n\r\n    let credentialCreateOptions = await response.json();\r\n\r\n    credentialCreateOptions.user.id = toArrayBuffer(credentialCreateOptions.user.id);\r\n    credentialCreateOptions.challenge = toArrayBuffer(credentialCreateOptions.challenge);\r\n\r\n    credentialCreateOptions.excludeCredentials = credentialCreateOptions.excludeCredentials.map((credential: any) => {\r\n        return {\r\n            ...credential,\r\n            id: toArrayBuffer(credential.id)\r\n        };\r\n    });\r\n\r\n    if (credentialCreateOptions.authenticatorSelection?.authenticatorAttachment === null) {\r\n        credentialCreateOptions.authenticatorSelection.authenticatorAttachment = undefined;\r\n    }\r\n\r\n    return credentialCreateOptions;\r\n}\r\n\r\n/**\r\n * Registers the public key credential with the server.\r\n * @param credential The credential to store on the server.\r\n */\r\nexport async function registerPublicKeyCredential(credential: PublicKeyCredential) {\r\n\r\n    let attestationObject = credential.response instanceof AuthenticatorAttestationResponse && credential.response.attestationObject || null;\r\n\r\n    if (attestationObject === null) {\r\n        throw new Error(\"No attestation object found in the public key credential. Please make sure to use \" +\r\n            \"'navigator.credentials.create' to make the public key credential object.\");\r\n    }\r\n\r\n    let data = {\r\n        id: credential.id,\r\n        rawId: toBase64Url(credential.rawId),\r\n        type: credential.type,\r\n        extensions: credential.getClientExtensionResults(),\r\n        response: {\r\n            attestationObject: toBase64Url(attestationObject),\r\n            clientDataJson: toBase64Url(credential.response.clientDataJSON)\r\n        }\r\n    };\r\n\r\n    let response = await fetch(\"/api/registration/complete\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n            \"Accept\": \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n\r\n    if (response.status != 202) {\r\n        throw new Error(\"Failed to register the credential with the server\");\r\n    }\r\n}","import React, {useState} from \"react\";\r\nimport FormTextInput from \"../shared/FormTextInput\";\r\nimport {getCredentialCreateOptions, registerPublicKeyCredential} from \"./api\";\r\nimport {getRedirectUrl, redirect} from \"../shared/navigation\";\r\nimport {isInvalid, ValidationMessage} from \"../shared/validation\";\r\nimport ErrorMessage from \"../shared/ErrorMessage\";\r\n\r\n/**\r\n * Component used to render the registration form.\r\n */\r\nexport default function RegistrationForm(): React.ReactElement {\r\n    const [userName, setUserName] = useState(\"\");\r\n    const [displayName, setDisplayName] = useState(\"\");\r\n    const [userNameFeedback, setUserNameFeedback] = useState<Array<ValidationMessage>>([]);\r\n    const [displayNameFeedback, setDisplayNameFeedback] = useState<Array<ValidationMessage>>([]);\r\n    const [error, setError] = useState({message: \"\", visible: false});\r\n\r\n    function validateInput() {\r\n        let valid = true;\r\n\r\n        if(!displayName) {\r\n            setDisplayNameFeedback([{ message: \"Full Name is required.\"}]);\r\n            valid = false;\r\n        }\r\n\r\n        if(!userName) {\r\n            setUserNameFeedback([{ message: \"E-mail address is required.\"}]);\r\n            valid = false;\r\n        }\r\n        \r\n        return valid;\r\n    }\r\n    \r\n    async function startRegistration() {\r\n        setError({message: \"\", visible: false});\r\n        \r\n        if(!validateInput()) {\r\n            return false;\r\n        }\r\n        \r\n        try {\r\n            let result = await getCredentialCreateOptions(displayName, userName);\r\n\r\n            if(isInvalid(result)) {\r\n                setError({ message: result.messages[\"\"].join(\"\\r\\n\"), visible: true});\r\n                return;\r\n            }\r\n            \r\n            let credential = await navigator.credentials.create({\r\n                publicKey: result\r\n            });\r\n\r\n            if (credential !== null && credential instanceof PublicKeyCredential) {\r\n                await registerPublicKeyCredential(credential);\r\n            } else {\r\n                setError({\r\n                    message: \"Unable to obtain the required information to register. Please try again.\",\r\n                    visible: true\r\n                });\r\n\r\n                return;\r\n            }\r\n\r\n            redirect(getRedirectUrl() ?? \"/\");\r\n        } catch (error: any) {\r\n            setError({\r\n                message: `Failed to login due to a technical problem: ${error.message}. Please try again.`,\r\n                visible: true\r\n            });\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {error.visible && <ErrorMessage title={\"Unable to login\"} message={error.message}/>}\r\n            <FormTextInput\r\n                label=\"Full Name\" \r\n                identifier=\"fullName\" \r\n                setValue={setDisplayName} \r\n                value={displayName}\r\n                isRequired={true} \r\n                feedback={displayNameFeedback}\r\n            />\r\n            <FormTextInput \r\n                label=\"Email Address\" \r\n                identifier=\"userName\" \r\n                setValue={setUserName} \r\n                value={userName}\r\n                isRequired={true} \r\n                feedback={userNameFeedback}\r\n            />\r\n            <button type=\"button\" onClick={startRegistration} className=\"btn btn-primary\">Register</button>\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport RegistrationForm from \"./RegistrationForm\";\r\n\r\nconst rootElement = document.getElementById(\"registration-form\");\r\n\r\nif (rootElement !== null) {\r\n    const root = ReactDOM.createRoot(rootElement);\r\n    root.render(<RegistrationForm/>);\r\n} else {\r\n    throw new Error(\"Root element with id registration-form not found on the page!\");\r\n}","import React from \"react\";\r\n\r\ninterface ErrorMessageProps {\r\n    title: string\r\n    message: string\r\n}\r\n\r\nexport default function ErrorMessage({title, message}: ErrorMessageProps): React.ReactElement {\r\n    return (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n            <h4 className=\"alert-heading\">{title}</h4>\r\n            <hr/>\r\n            <p>{message}</p>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {ValidationMessage} from \"./validation\";\r\n\r\ninterface InvalidFeedbackProps {\r\n    messages: ValidationMessage[]\r\n}\r\n\r\nexport default function InvalidFeedback({ messages} : InvalidFeedbackProps): React.ReactElement {\r\n    return (\r\n        <>\r\n            {messages.map((item, index) => <div className=\"invalid-feedback\" key={index}>{item.message}</div>)}\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport InvalidFeedback from \"./InvalidFeedback\";\r\nimport {ValidationMessage} from \"./validation\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface FormTextInputProps {\r\n    label: string\r\n    identifier: string\r\n    setValue: (value: string) => void\r\n    value: string\r\n    isRequired: boolean\r\n    feedback: ValidationMessage[]\r\n}\r\n\r\nexport default function FormTextInput(\r\n    {label, identifier, setValue, value, feedback = [], isRequired = false}: FormTextInputProps\r\n): React.ReactElement {\r\n    return (\r\n        <div className={classNames(\"mb-3\", {\"was-validated\": feedback.length > 0})}>\r\n            <label htmlFor={identifier} className=\"form-label\">\r\n                {label}\r\n            </label>\r\n            <input type=\"text\" id={identifier}\r\n                   className=\"form-control\"\r\n                   onChange={(args) => setValue(args.target.value)}\r\n                   value={value} required={isRequired}\r\n            />\r\n            {feedback.length > 0 && <InvalidFeedback messages={feedback}/>}\r\n        </div>\r\n    );\r\n}\r\n","export type BufferLike = string | Array<number> | Uint8Array | ArrayBuffer;\r\n\r\n/**\r\n * Converts an array-like object to an array buffer.\r\n * @param data  The input data to convert.\r\n * @returns The converted output.\r\n */\r\nexport function toArrayBuffer(data: BufferLike): ArrayBuffer {\r\n    if (typeof data === \"string\") {\r\n        data = data.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\r\n        let str = window.atob(data);\r\n        let bytes = new Uint8Array(str.length);\r\n\r\n        for (let i = 0; i < str.length; i++) {\r\n            bytes[i] = str.charCodeAt(i);\r\n        }\r\n\r\n        return bytes;\r\n    }\r\n\r\n    if (Array.isArray(data)) {\r\n        return new Uint8Array(data);\r\n    }\r\n\r\n    if (data instanceof Uint8Array) {\r\n        return data.buffer;\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\n/**\r\n * Converts an array-like object to a base64 URL-encoded string.\r\n * @param data The input data to convert.\r\n * @returns The URL-encoded base64 string.\r\n */\r\nexport function toBase64Url(data: Uint8Array | ArrayBuffer): string {\r\n    if (data instanceof ArrayBuffer) {\r\n        data = new Uint8Array(data);\r\n    }\r\n\r\n    if (data instanceof Uint8Array) {\r\n        let str = \"\";\r\n        let length = data.byteLength;\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            str += String.fromCharCode(data[i]);\r\n        }\r\n\r\n        return window.btoa(str).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=*$/g, \"\");\r\n    }\r\n\r\n    throw new Error(`Invalid input data: ${data}`);\r\n}","/**\r\n * Gets all query string parameters from the current page.\r\n */\r\nfunction getQueryParams(): { [item: string]: string } {\r\n    return location.search\r\n        ? location.search.substring(1).split(\"&\").reduce((qd: any, item: any) => {\r\n            let [k, v] = item.split(\"=\");\r\n            v = v && decodeURIComponent(v);\r\n            (qd[k] = qd[k] || []).push(v);\r\n            return qd\r\n        }, {})\r\n        : {}\r\n}\r\n\r\n/**\r\n * Returns the redirect URL for the current page.\r\n */\r\nexport function getRedirectUrl() {\r\n    const queryParams = getQueryParams();\r\n    \r\n    if(queryParams[\"returnUrl\"]) {\r\n        return queryParams[\"returnUrl\"];    \r\n    }\r\n    \r\n    return \"/\";\r\n}\r\n\r\n/**\r\n * Redirects the user to the specified URL.\r\n * @param url URL to redirect to.\r\n */\r\nexport function redirect(url: string) {\r\n    window.location.replace(url);\r\n}","export interface ValidationMessage {\r\n    message: string\r\n}\r\n\r\nexport interface ValidationMessageDictionary {\r\n    [key: string]: string[]\r\n}\r\n\r\nexport interface ValidationResult {\r\n    messages: ValidationMessageDictionary\r\n}\r\n\r\nexport function isInvalid<R>(result: R | ValidationResult): result is ValidationResult { \r\n    return (result as ValidationResult).messages !== undefined;\r\n} \r\n\r\nexport function isValid<R>(result: R | ValidationResult): result is R {\r\n    return (result as ValidationResult).messages === undefined;\r\n}","/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n"],"names":["i","getCredentialCreateOptions","displayName","userName","data","fetch","method","body","JSON","stringify","headers","response","status","json","errorResponseData","messages","credentialCreateOptions","user","id","toArrayBuffer","challenge","excludeCredentials","map","credential","authenticatorSelection","authenticatorAttachment","undefined","registerPublicKeyCredential","attestationObject","AuthenticatorAttestationResponse","Error","rawId","toBase64Url","type","extensions","getClientExtensionResults","clientDataJson","clientDataJSON","RegistrationForm","useState","setUserName","setDisplayName","userNameFeedback","setUserNameFeedback","displayNameFeedback","setDisplayNameFeedback","message","visible","error","setError","validateInput","valid","result","isInvalid","join","navigator","credentials","create","publicKey","PublicKeyCredential","redirect","getRedirectUrl","ErrorMessage","title","FormTextInput","label","identifier","setValue","value","isRequired","feedback","onClick","className","rootElement","document","getElementById","ReactDOM","render","role","InvalidFeedback","item","index","key","classNames","length","htmlFor","onChange","args","target","required","replace","str","window","atob","bytes","Uint8Array","charCodeAt","Array","isArray","buffer","ArrayBuffer","byteLength","String","fromCharCode","btoa","queryParams","location","search","substring","split","reduce","qd","k","v","decodeURIComponent","push","url","hasOwn","hasOwnProperty","classes","arguments","arg","argType","inner","apply","toString","Object","prototype","call","module","exports","default","m","createRoot","hydrateRoot"],"sourceRoot":""}