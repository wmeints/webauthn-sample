{"version":3,"file":"js/registration.js","mappings":"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","sources":["webpack://client/./shared/FormTextInput.tsx","webpack://client/./registration/api.ts","webpack://client/./registration/RegistrationForm.tsx","webpack://client/./registration/index.tsx"],"sourcesContent":["import React from \"react\";\r\n\r\ninterface FormTextInputProps {\r\n  label: string;\r\n  identifier: string;\r\n  setValue: (value: string) => void;\r\n  value: string;\r\n}\r\n\r\nexport default function FormTextInput({\r\n  label,\r\n  identifier,\r\n  setValue,\r\n  value,\r\n}: FormTextInputProps): React.ReactElement {\r\n  return (\r\n    <div className=\"mb-3\">\r\n      <label htmlFor={identifier} className=\"form-label\">\r\n        {label}\r\n      </label>\r\n      <input type=\"text\" id={identifier} className=\"form-control\" onChange={(args) => setValue(args.target.value)} value={value}></input>\r\n    </div>\r\n  );\r\n}\r\n","type BufferLike = string | Array<number> | Uint8Array | ArrayBuffer;\r\n\r\n/**\r\n * Converts an array-like object to an array buffer.\r\n * @param data  The input data to convert.\r\n * @returns The converted output.\r\n */\r\nfunction toArrayBuffer(data: BufferLike): ArrayBuffer {\r\n    if (typeof data === \"string\") {\r\n        data = data.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\r\n        let str = window.atob(data);\r\n        let bytes = new Uint8Array(str.length);\r\n\r\n        for (let i = 0; i < str.length; i++) {\r\n            bytes[i] = str.charCodeAt(i);\r\n        }\r\n\r\n        return bytes;\r\n    }\r\n\r\n    if (Array.isArray(data)) {\r\n        return new Uint8Array(data);\r\n    }\r\n\r\n    if (data instanceof Uint8Array) {\r\n        return data.buffer;\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\n/**\r\n * Converts an array-like object to a base64 URL-encoded string.\r\n * @param data The input data to convert.\r\n * @returns The URL-encoded base64 string.\r\n */\r\nfunction toBase64Url(data: Uint8Array | ArrayBuffer): string {\r\n    if (data instanceof ArrayBuffer) {\r\n        data = new Uint8Array(data);\r\n    }\r\n\r\n    if (data instanceof Uint8Array) {\r\n        let str = \"\";\r\n        let length = data.byteLength;\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            str += String.fromCharCode(data[i]);\r\n        }\r\n\r\n        return window.btoa(str).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=*$/g, \"\");\r\n    }\r\n\r\n    throw new Error(`Invalid input data: ${data}`);\r\n}\r\n\r\n/**\r\n * Retrieves the options for creating a new public key credential on the website.\r\n * @param displayName The display name for the user.\r\n * @param userName  The user name for the user.\r\n * @returns The options to use for creating a new public key credential in the browser using a USB key.\r\n */\r\nexport async function getCredentialCreateOptions(displayName: string, userName: string): Promise<PublicKeyCredentialCreationOptions | undefined> {\r\n    let data = {\r\n        userName,\r\n        displayName\r\n    };\r\n\r\n    try {\r\n        let response = await fetch(\"/api/registration/credentialoptions\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\"\r\n            }\r\n        });\r\n\r\n        let credentialCreateOptions = await response.json();\r\n\r\n        credentialCreateOptions.user.id = toArrayBuffer(credentialCreateOptions.user.id);\r\n        credentialCreateOptions.challenge = toArrayBuffer(credentialCreateOptions.challenge);\r\n\r\n        credentialCreateOptions.excludeCredentials = credentialCreateOptions.excludeCredentials.map((credential: any) => {\r\n            return {\r\n                ...credential,\r\n                id: toArrayBuffer(credential.id)\r\n            };\r\n        });\r\n\r\n        if (credentialCreateOptions.authenticatorSelection?.authenticatorAttachment === null) {\r\n            credentialCreateOptions.authenticatorSelection.authenticatorAttachment = undefined;\r\n        }\r\n\r\n        return credentialCreateOptions;\r\n    } catch (ex) {\r\n        throw ex;\r\n    }\r\n}\r\n\r\n/**\r\n * Registers the public key credential with the server.\r\n * @param credential The credential to store on the server.\r\n */\r\nexport async function registerPublicKeyCredential(credential: PublicKeyCredential) {\r\n\r\n    let attestationObject = credential.response instanceof AuthenticatorAttestationResponse && credential.response.attestationObject || null;\r\n\r\n    if (attestationObject === null) {\r\n        throw new Error(\"No attestation object found in the public key credential. Please make sure to use \" +\r\n            \"'navigator.credentials.create' to make the public key credential object.\");\r\n    }\r\n\r\n    let data = {\r\n        id: credential.id,\r\n        rawId: toBase64Url(credential.rawId),\r\n        type: credential.type,\r\n        extensions: credential.getClientExtensionResults(),\r\n        response: {\r\n            attestationObject: toBase64Url(attestationObject),\r\n            clientDataJson: toBase64Url(credential.response.clientDataJSON)\r\n        }\r\n    };\r\n    \r\n    let response = await fetch(\"/api/registration/complete\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n            \"Accept\": \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n    \r\n    if(response.status != 202) {\r\n        throw new Error(\"Failed to register the credential with the server\");\r\n    }\r\n}","import React, {useState} from \"react\";\r\nimport FormTextInput from \"../shared/FormTextInput\";\r\nimport {getCredentialCreateOptions, registerPublicKeyCredential} from \"./api\";\r\n\r\n/**\r\n * Component used to render the registration form.\r\n */\r\nexport default function RegistrationForm(): React.ReactElement {\r\n    const [userName, setUserName] = useState(\"\");\r\n    const [displayName, setDisplayName] = useState(\"\");\r\n\r\n    async function startRegistration() {\r\n        console.log(\"Registration started\");\r\n\r\n        let credentialCreateOptions = await getCredentialCreateOptions(displayName, userName);\r\n\r\n        let credential = await navigator.credentials.create({\r\n            publicKey: credentialCreateOptions\r\n        });\r\n\r\n        if (credential !== null && credential instanceof PublicKeyCredential) {\r\n            await registerPublicKeyCredential(credential);\r\n        } else {\r\n            throw new Error(\"Failed to register public key credential. Received no credential object that is usable.\");\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={startRegistration}>\r\n            <FormTextInput label=\"Full Name\" identifier=\"fullName\" setValue={setDisplayName} value={displayName}/>\r\n            <FormTextInput label=\"Email Address\" identifier=\"userName\" setValue={setUserName} value={userName}/>\r\n            <button type=\"submit\" className=\"btn btn-primary\">Register</button>\r\n        </form>\r\n    );\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport RegistrationForm from \"./RegistrationForm\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"registration-form\"));\r\nroot.render(<RegistrationForm/>);\r\n"],"names":["FormTextInput","label","identifier","setValue","value","className","htmlFor","type","id","onChange","args","target","toArrayBuffer","data","replace","str","window","atob","bytes","Uint8Array","length","i","charCodeAt","Array","isArray","buffer","toBase64Url","ArrayBuffer","byteLength","String","fromCharCode","btoa","Error","getCredentialCreateOptions","displayName","userName","fetch","method","body","JSON","stringify","headers","response","json","credentialCreateOptions","user","challenge","excludeCredentials","map","credential","authenticatorSelection","authenticatorAttachment","undefined","registerPublicKeyCredential","attestationObject","AuthenticatorAttestationResponse","rawId","extensions","getClientExtensionResults","clientDataJson","clientDataJSON","status","RegistrationForm","useState","setUserName","setDisplayName","console","log","navigator","credentials","create","publicKey","PublicKeyCredential","onSubmit","ReactDOM","document","getElementById","render"],"sourceRoot":""}