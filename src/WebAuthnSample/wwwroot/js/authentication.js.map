{"version":3,"file":"js/authentication.js","mappings":"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","sources":["webpack://client/./authentication/api.ts","webpack://client/./authentication/LoginForm.tsx","webpack://client/./authentication/index.tsx","webpack://client/./shared/FormTextInput.tsx","webpack://client/./shared/conversions.ts"],"sourcesContent":["import { toBase64Url, toArrayBuffer } from \"../shared/conversions\";\r\n\r\n/**\r\n * Gets the options to start an assertion operation\r\n * @param userName User name for which to retrieve the assertion options.\r\n * @returns The assertion options to use for the assertion operation.\r\n */\r\nexport async function getAuthenticationOptions(userName: string): Promise<PublicKeyCredentialRequestOptions> {\r\n    let response = await fetch(\"/api/authentication/options\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n            userName: userName\r\n        }),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\"\r\n        }\r\n    });\r\n\r\n    let assertionOptions = await response.json();\r\n    \r\n    assertionOptions.challenge = toArrayBuffer(assertionOptions.challenge);\r\n    assertionOptions.allowCredentials = assertionOptions.allowCredentials.map((credential: any) => {\r\n        return {\r\n            ...credential,\r\n            id: toArrayBuffer(credential.id)\r\n        };\r\n    });\r\n    \r\n    return assertionOptions;\r\n}\r\n\r\n/**\r\n * Sends the public key credential information to the server to authenticate the user.\r\n * @param credentials Public key credentials to send.\r\n */\r\nexport async function authenticate(credentials: PublicKeyCredential) {\r\n    const authenticatorResponse = credentials.response as AuthenticatorAssertionResponse;\r\n    \r\n    const data = {\r\n        id: credentials.id,\r\n        rawId: toBase64Url(credentials.rawId),\r\n        type: credentials.type,\r\n        extensions: credentials.getClientExtensionResults(),\r\n        response: {\r\n            authenticatorData: toBase64Url(authenticatorResponse.authenticatorData),\r\n            clientDataJSON: toBase64Url(authenticatorResponse.clientDataJSON),\r\n            userHandle: authenticatorResponse.userHandle !== null ? toBase64Url(authenticatorResponse.userHandle) : undefined,\r\n            signature: toBase64Url(authenticatorResponse.signature)\r\n        }\r\n    };\r\n    \r\n    let response = await fetch(\"/api/authentication/login\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\"\r\n        }\r\n    });\r\n    \r\n    if(response.status !== 200) {\r\n        throw new Error(\"Assertion failed. Couldn't authenticate the user.\");\r\n    }\r\n}","import React, {useState} from \"react\";\r\nimport FormTextInput from \"../shared/FormTextInput\";\r\nimport {authenticate, getAuthenticationOptions} from \"./api\";\r\n\r\nexport default function LoginForm() {\r\n    const [userName, setUserName] = useState(\"\");\r\n    \r\n    async function startAssertion() {\r\n        console.log(\"Assertion started\");\r\n        \r\n        let assertionOptions = await getAuthenticationOptions(userName);\r\n        \r\n        let credentials = await navigator.credentials.get({\r\n            publicKey: assertionOptions\r\n        });\r\n        \r\n        if(credentials == null || !(credentials instanceof PublicKeyCredential))\r\n        {\r\n            throw new Error(\"Can't obtain public key credentials to authenticate the user.\");\r\n        }\r\n        \r\n        await authenticate(credentials);\r\n        \r\n        return false;\r\n    }\r\n    \r\n    return (\r\n        <form>\r\n            <FormTextInput label=\"Email Address\" identifier=\"userName\" setValue={setUserName} value={userName}/>\r\n            <button type=\"button\" onClick={startAssertion} className=\"btn btn-primary\">Register</button>\r\n        </form>\r\n    );\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"login-form\"));\r\nroot.render(<LoginForm/>);\r\n","import React from \"react\";\r\n\r\ninterface FormTextInputProps {\r\n  label: string;\r\n  identifier: string;\r\n  setValue: (value: string) => void;\r\n  value: string;\r\n}\r\n\r\nexport default function FormTextInput({\r\n  label,\r\n  identifier,\r\n  setValue,\r\n  value,\r\n}: FormTextInputProps): React.ReactElement {\r\n  return (\r\n    <div className=\"mb-3\">\r\n      <label htmlFor={identifier} className=\"form-label\">\r\n        {label}\r\n      </label>\r\n      <input type=\"text\" id={identifier} className=\"form-control\" onChange={(args) => setValue(args.target.value)} value={value}></input>\r\n    </div>\r\n  );\r\n}\r\n","export type BufferLike = string | Array<number> | Uint8Array | ArrayBuffer;\r\n\r\n/**\r\n * Converts an array-like object to an array buffer.\r\n * @param data  The input data to convert.\r\n * @returns The converted output.\r\n */\r\nexport function toArrayBuffer(data: BufferLike): ArrayBuffer {\r\n    if (typeof data === \"string\") {\r\n        data = data.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\r\n        let str = window.atob(data);\r\n        let bytes = new Uint8Array(str.length);\r\n\r\n        for (let i = 0; i < str.length; i++) {\r\n            bytes[i] = str.charCodeAt(i);\r\n        }\r\n\r\n        return bytes;\r\n    }\r\n\r\n    if (Array.isArray(data)) {\r\n        return new Uint8Array(data);\r\n    }\r\n\r\n    if (data instanceof Uint8Array) {\r\n        return data.buffer;\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\n/**\r\n * Converts an array-like object to a base64 URL-encoded string.\r\n * @param data The input data to convert.\r\n * @returns The URL-encoded base64 string.\r\n */\r\nexport function toBase64Url(data: Uint8Array | ArrayBuffer): string {\r\n    if (data instanceof ArrayBuffer) {\r\n        data = new Uint8Array(data);\r\n    }\r\n\r\n    if (data instanceof Uint8Array) {\r\n        let str = \"\";\r\n        let length = data.byteLength;\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            str += String.fromCharCode(data[i]);\r\n        }\r\n\r\n        return window.btoa(str).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=*$/g, \"\");\r\n    }\r\n\r\n    throw new Error(`Invalid input data: ${data}`);\r\n}"],"names":["getAuthenticationOptions","userName","fetch","method","body","JSON","stringify","headers","response","json","assertionOptions","challenge","toArrayBuffer","allowCredentials","map","credential","id","authenticate","credentials","authenticatorResponse","data","rawId","toBase64Url","type","extensions","getClientExtensionResults","authenticatorData","clientDataJSON","userHandle","undefined","signature","status","Error","i","LoginForm","useState","setUserName","console","log","navigator","get","publicKey","PublicKeyCredential","FormTextInput","label","identifier","setValue","value","onClick","className","ReactDOM","document","getElementById","render","htmlFor","onChange","args","target","replace","str","window","atob","bytes","Uint8Array","length","charCodeAt","Array","isArray","buffer","ArrayBuffer","byteLength","String","fromCharCode","btoa"],"sourceRoot":""}