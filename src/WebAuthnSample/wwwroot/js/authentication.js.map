{"version":3,"file":"js/authentication.js","mappings":"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","sources":["webpack://client/./authentication/api.ts","webpack://client/./authentication/LoginForm.tsx","webpack://client/./authentication/index.tsx","webpack://client/./shared/ErrorMessage.tsx","webpack://client/./shared/InvalidFeedback.tsx","webpack://client/./shared/FormTextInput.tsx","webpack://client/./shared/conversions.ts","webpack://client/./shared/navigation.ts","webpack://client/./shared/validation.ts","webpack://client/./node_modules/classnames/index.js","webpack://client/./node_modules/react-dom/client.js"],"sourcesContent":["import { toBase64Url, toArrayBuffer } from \"../shared/conversions\";\r\nimport {ValidationResult} from \"../shared/validation\";\r\n\r\n/**\r\n * Gets the options to start an assertion operation\r\n * @param userName User name for which to retrieve the assertion options.\r\n * @returns The assertion options to use for the assertion operation.\r\n */\r\nexport async function getAuthenticationOptions(userName: string): Promise<PublicKeyCredentialRequestOptions | ValidationResult> {\r\n    let response = await fetch(\"/api/authentication/options\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n            userName: userName\r\n        }),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\"\r\n        }\r\n    });\r\n\r\n    if (response.status == 400) {\r\n        let errorResponseData = await response.json();\r\n        return {messages: errorResponseData};\r\n    }\r\n\r\n    let assertionOptions = await response.json();\r\n    \r\n    assertionOptions.challenge = toArrayBuffer(assertionOptions.challenge);\r\n    assertionOptions.allowCredentials = assertionOptions.allowCredentials.map((credential: any) => {\r\n        return {\r\n            ...credential,\r\n            id: toArrayBuffer(credential.id)\r\n        };\r\n    });\r\n    \r\n    return assertionOptions;\r\n}\r\n\r\n/**\r\n * Sends the public key credential information to the server to authenticate the user.\r\n * @param credentials Public key credentials to send.\r\n */\r\nexport async function authenticate(credentials: PublicKeyCredential) {\r\n    const authenticatorResponse = credentials.response as AuthenticatorAssertionResponse;\r\n    \r\n    const data = {\r\n        id: credentials.id,\r\n        rawId: toBase64Url(credentials.rawId),\r\n        type: credentials.type,\r\n        extensions: credentials.getClientExtensionResults(),\r\n        response: {\r\n            authenticatorData: toBase64Url(authenticatorResponse.authenticatorData),\r\n            clientDataJSON: toBase64Url(authenticatorResponse.clientDataJSON),\r\n            userHandle: authenticatorResponse.userHandle !== null ? toBase64Url(authenticatorResponse.userHandle) : undefined,\r\n            signature: toBase64Url(authenticatorResponse.signature)\r\n        }\r\n    };\r\n    \r\n    let response = await fetch(\"/api/authentication/login\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\"\r\n        }\r\n    });\r\n    \r\n    if(response.status !== 200) {\r\n        throw new Error(\"Assertion failed. Couldn't authenticate the user.\");\r\n    }\r\n}","import React, {useState} from \"react\";\r\nimport FormTextInput from \"../shared/FormTextInput\";\r\nimport {authenticate, getAuthenticationOptions} from \"./api\";\r\nimport {getRedirectUrl, redirect} from \"../shared/navigation\";\r\nimport ErrorMessage from \"../shared/ErrorMessage\";\r\nimport {isInvalid, ValidationMessage} from \"../shared/validation\";\r\n\r\nexport default function LoginForm() {\r\n    const [userName, setUserName] = useState(\"\");\r\n    const [userNameFeedback, setUserNameFeedback] = useState<Array<ValidationMessage>>([]);\r\n    const [error, setError] = useState({message: \"\", visible: false});\r\n\r\n    function validateInput() {\r\n        if (!userName) {\r\n            setUserNameFeedback([{message: \"E-mail address is required.\"}]);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    async function startAssertion() {\r\n        setError({message: \"\", visible: false});\r\n\r\n        if (!validateInput()) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            let result = await getAuthenticationOptions(userName);\r\n\r\n            if(isInvalid(result)) {\r\n                setError({ message: result.messages[\"\"].join(\"\\r\\n\"), visible: true});\r\n                return;\r\n            }\r\n            \r\n            let credentials = await navigator.credentials.get({\r\n                publicKey: result\r\n            });\r\n\r\n            if (credentials == null || !(credentials instanceof PublicKeyCredential)) {\r\n                setError({\r\n                    message: \"Unable to obtain the required information to login. Please try again.\",\r\n                    visible: true\r\n                });\r\n\r\n                return;\r\n            }\r\n\r\n            await authenticate(credentials);\r\n\r\n            redirect(getRedirectUrl() ?? \"/\");\r\n        } catch (error: any) {\r\n            setError({\r\n                message: `Failed to login due to a technical problem: ${error.message}. Please try again.`,\r\n                visible: true\r\n            });\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {error.visible && <ErrorMessage title={\"Unable to login\"} message={error.message}/>}\r\n            <FormTextInput label=\"Email Address\" identifier=\"userName\" setValue={setUserName} value={userName}\r\n                           isRequired={true} feedback={userNameFeedback}/>\r\n            <button type=\"button\" onClick={startAssertion} className=\"btn btn-primary\">Login</button>\r\n            <a href={`/Identity/Account/Register?returnUrl=${encodeURIComponent(getRedirectUrl())}`}\r\n               className=\"btn btn-link\">Register new account</a>\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nconst rootElement = document.getElementById(\"login-form\");\r\n\r\nif (rootElement !== null) {\r\n    const root = ReactDOM.createRoot(rootElement);\r\n    root.render(<LoginForm/>);\r\n} else {\r\n    throw new Error(\"Root element with id login-form not found on the page!\");\r\n}","import React from \"react\";\r\n\r\ninterface ErrorMessageProps {\r\n    title: string\r\n    message: string\r\n}\r\n\r\nexport default function ErrorMessage({title, message}: ErrorMessageProps): React.ReactElement {\r\n    return (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n            <h4 className=\"alert-heading\">{title}</h4>\r\n            <hr/>\r\n            <p>{message}</p>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {ValidationMessage} from \"./validation\";\r\n\r\ninterface InvalidFeedbackProps {\r\n    messages: ValidationMessage[]\r\n}\r\n\r\nexport default function InvalidFeedback({ messages} : InvalidFeedbackProps): React.ReactElement {\r\n    return (\r\n        <>\r\n            {messages.map((item, index) => <div className=\"invalid-feedback\" key={index}>{item.message}</div>)}\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport InvalidFeedback from \"./InvalidFeedback\";\r\nimport {ValidationMessage} from \"./validation\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface FormTextInputProps {\r\n    label: string\r\n    identifier: string\r\n    setValue: (value: string) => void\r\n    value: string\r\n    isRequired: boolean\r\n    feedback: ValidationMessage[]\r\n}\r\n\r\nexport default function FormTextInput(\r\n    {label, identifier, setValue, value, feedback = [], isRequired = false}: FormTextInputProps\r\n): React.ReactElement {\r\n    return (\r\n        <div className={classNames(\"mb-3\", {\"was-validated\": feedback.length > 0})}>\r\n            <label htmlFor={identifier} className=\"form-label\">\r\n                {label}\r\n            </label>\r\n            <input type=\"text\" id={identifier}\r\n                   className=\"form-control\"\r\n                   onChange={(args) => setValue(args.target.value)}\r\n                   value={value} required={isRequired}\r\n            />\r\n            {feedback.length > 0 && <InvalidFeedback messages={feedback}/>}\r\n        </div>\r\n    );\r\n}\r\n","export type BufferLike = string | Array<number> | Uint8Array | ArrayBuffer;\r\n\r\n/**\r\n * Converts an array-like object to an array buffer.\r\n * @param data  The input data to convert.\r\n * @returns The converted output.\r\n */\r\nexport function toArrayBuffer(data: BufferLike): ArrayBuffer {\r\n    if (typeof data === \"string\") {\r\n        data = data.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\r\n        let str = window.atob(data);\r\n        let bytes = new Uint8Array(str.length);\r\n\r\n        for (let i = 0; i < str.length; i++) {\r\n            bytes[i] = str.charCodeAt(i);\r\n        }\r\n\r\n        return bytes;\r\n    }\r\n\r\n    if (Array.isArray(data)) {\r\n        return new Uint8Array(data);\r\n    }\r\n\r\n    if (data instanceof Uint8Array) {\r\n        return data.buffer;\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\n/**\r\n * Converts an array-like object to a base64 URL-encoded string.\r\n * @param data The input data to convert.\r\n * @returns The URL-encoded base64 string.\r\n */\r\nexport function toBase64Url(data: Uint8Array | ArrayBuffer): string {\r\n    if (data instanceof ArrayBuffer) {\r\n        data = new Uint8Array(data);\r\n    }\r\n\r\n    if (data instanceof Uint8Array) {\r\n        let str = \"\";\r\n        let length = data.byteLength;\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            str += String.fromCharCode(data[i]);\r\n        }\r\n\r\n        return window.btoa(str).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=*$/g, \"\");\r\n    }\r\n\r\n    throw new Error(`Invalid input data: ${data}`);\r\n}","/**\r\n * Gets all query string parameters from the current page.\r\n */\r\nfunction getQueryParams(): { [item: string]: string } {\r\n    return location.search\r\n        ? location.search.substring(1).split(\"&\").reduce((qd: any, item: any) => {\r\n            let [k, v] = item.split(\"=\");\r\n            v = v && decodeURIComponent(v);\r\n            (qd[k] = qd[k] || []).push(v);\r\n            return qd\r\n        }, {})\r\n        : {}\r\n}\r\n\r\n/**\r\n * Returns the redirect URL for the current page.\r\n */\r\nexport function getRedirectUrl() {\r\n    const queryParams = getQueryParams();\r\n    \r\n    if(queryParams[\"returnUrl\"]) {\r\n        return queryParams[\"returnUrl\"];    \r\n    }\r\n    \r\n    return \"/\";\r\n}\r\n\r\n/**\r\n * Redirects the user to the specified URL.\r\n * @param url URL to redirect to.\r\n */\r\nexport function redirect(url: string) {\r\n    window.location.replace(url);\r\n}","export interface ValidationMessage {\r\n    message: string\r\n}\r\n\r\nexport interface ValidationMessageDictionary {\r\n    [key: string]: string[]\r\n}\r\n\r\nexport interface ValidationResult {\r\n    messages: ValidationMessageDictionary\r\n}\r\n\r\nexport function isInvalid<R>(result: R | ValidationResult): result is ValidationResult { \r\n    return (result as ValidationResult).messages !== undefined;\r\n} \r\n\r\nexport function isValid<R>(result: R | ValidationResult): result is R {\r\n    return (result as ValidationResult).messages === undefined;\r\n}","/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n"],"names":["i","getAuthenticationOptions","userName","fetch","method","body","JSON","stringify","headers","response","status","json","errorResponseData","messages","assertionOptions","challenge","toArrayBuffer","allowCredentials","map","credential","id","authenticate","credentials","authenticatorResponse","data","rawId","toBase64Url","type","extensions","getClientExtensionResults","authenticatorData","clientDataJSON","userHandle","undefined","signature","Error","LoginForm","useState","setUserName","userNameFeedback","setUserNameFeedback","message","visible","error","setError","validateInput","result","isInvalid","join","navigator","get","publicKey","PublicKeyCredential","redirect","getRedirectUrl","ErrorMessage","title","FormTextInput","label","identifier","setValue","value","isRequired","feedback","onClick","className","href","encodeURIComponent","rootElement","document","getElementById","ReactDOM","render","role","InvalidFeedback","item","index","key","classNames","length","htmlFor","onChange","args","target","required","replace","str","window","atob","bytes","Uint8Array","charCodeAt","Array","isArray","buffer","ArrayBuffer","byteLength","String","fromCharCode","btoa","queryParams","location","search","substring","split","reduce","qd","k","v","decodeURIComponent","push","url","hasOwn","hasOwnProperty","classes","arguments","arg","argType","inner","apply","toString","Object","prototype","call","module","exports","default","m","createRoot","hydrateRoot"],"sourceRoot":""}